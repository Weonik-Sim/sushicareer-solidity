/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Token {
  export type EmployeeStruct = {
    employeeAddress: PromiseOrValue<string>;
    employeeName: PromiseOrValue<string>;
    employeeZanToken: PromiseOrValue<BigNumberish>;
    companyName: PromiseOrValue<string>;
    companyUrl: PromiseOrValue<string>;
    employeeSendToken: PromiseOrValue<BigNumberish>;
    employeeReceiveToken: PromiseOrValue<BigNumberish>;
  };

  export type EmployeeStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    employeeAddress: string;
    employeeName: string;
    employeeZanToken: BigNumber;
    companyName: string;
    companyUrl: string;
    employeeSendToken: BigNumber;
    employeeReceiveToken: BigNumber;
  };
}

export interface TokenInterface extends utils.Interface {
  functions: {
    "_createEmployee(string,string,string)": FunctionFragment;
    "_getAllThings()": FunctionFragment;
    "_getEmployeeInfo(uint256)": FunctionFragment;
    "_sendSushi(uint256,uint256,uint256)": FunctionFragment;
    "employeeAddressId(address)": FunctionFragment;
    "employeeExist(address)": FunctionFragment;
    "employeeIdAddress(uint256)": FunctionFragment;
    "employees(uint256)": FunctionFragment;
    "getEmployeeInfoAddress()": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_createEmployee"
      | "_getAllThings"
      | "_getEmployeeInfo"
      | "_sendSushi"
      | "employeeAddressId"
      | "employeeExist"
      | "employeeIdAddress"
      | "employees"
      | "getEmployeeInfoAddress"
      | "name"
      | "symbol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_createEmployee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAllThings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getEmployeeInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_sendSushi",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeAddressId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeIdAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeInfoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_createEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAllThings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getEmployeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_sendSushi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "employeeAddressId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeIdAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeInfoAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {
    "RegisterEmployee(uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegisterEmployee"): EventFragment;
}

export interface RegisterEmployeeEventObject {
  id: BigNumber;
  userName: string;
  employeeZanToken: BigNumber;
}
export type RegisterEmployeeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RegisterEmployeeEventObject
>;

export type RegisterEmployeeEventFilter =
  TypedEventFilter<RegisterEmployeeEvent>;

export interface Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _createEmployee(
      _name: PromiseOrValue<string>,
      _companyName: PromiseOrValue<string>,
      _companyUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _getAllThings(
      overrides?: CallOverrides
    ): Promise<[Token.EmployeeStructOutput[]]>;

    _getEmployeeInfo(
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Token.EmployeeStructOutput]>;

    _sendSushi(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _sushi: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    employeeAddressId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    employeeExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    employeeIdAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    employees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
        employeeAddress: string;
        employeeName: string;
        employeeZanToken: BigNumber;
        companyName: string;
        companyUrl: string;
        employeeSendToken: BigNumber;
        employeeReceiveToken: BigNumber;
      }
    >;

    getEmployeeInfoAddress(
      overrides?: CallOverrides
    ): Promise<[BigNumber, Token.EmployeeStructOutput]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;
  };

  _createEmployee(
    _name: PromiseOrValue<string>,
    _companyName: PromiseOrValue<string>,
    _companyUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _getAllThings(
    overrides?: CallOverrides
  ): Promise<Token.EmployeeStructOutput[]>;

  _getEmployeeInfo(
    _from: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Token.EmployeeStructOutput>;

  _sendSushi(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    _sushi: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  employeeAddressId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  employeeExist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  employeeIdAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  employees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
      employeeAddress: string;
      employeeName: string;
      employeeZanToken: BigNumber;
      companyName: string;
      companyUrl: string;
      employeeSendToken: BigNumber;
      employeeReceiveToken: BigNumber;
    }
  >;

  getEmployeeInfoAddress(
    overrides?: CallOverrides
  ): Promise<[BigNumber, Token.EmployeeStructOutput]>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _createEmployee(
      _name: PromiseOrValue<string>,
      _companyName: PromiseOrValue<string>,
      _companyUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _getAllThings(
      overrides?: CallOverrides
    ): Promise<Token.EmployeeStructOutput[]>;

    _getEmployeeInfo(
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Token.EmployeeStructOutput>;

    _sendSushi(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _sushi: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    employeeAddressId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    employeeExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    employeeIdAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    employees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
        employeeAddress: string;
        employeeName: string;
        employeeZanToken: BigNumber;
        companyName: string;
        companyUrl: string;
        employeeSendToken: BigNumber;
        employeeReceiveToken: BigNumber;
      }
    >;

    getEmployeeInfoAddress(
      overrides?: CallOverrides
    ): Promise<[BigNumber, Token.EmployeeStructOutput]>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RegisterEmployee(uint256,string,uint256)"(
      id?: null,
      userName?: null,
      employeeZanToken?: null
    ): RegisterEmployeeEventFilter;
    RegisterEmployee(
      id?: null,
      userName?: null,
      employeeZanToken?: null
    ): RegisterEmployeeEventFilter;
  };

  estimateGas: {
    _createEmployee(
      _name: PromiseOrValue<string>,
      _companyName: PromiseOrValue<string>,
      _companyUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _getAllThings(overrides?: CallOverrides): Promise<BigNumber>;

    _getEmployeeInfo(
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _sendSushi(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _sushi: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    employeeAddressId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    employeeExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    employeeIdAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    employees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmployeeInfoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _createEmployee(
      _name: PromiseOrValue<string>,
      _companyName: PromiseOrValue<string>,
      _companyUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _getAllThings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getEmployeeInfo(
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _sendSushi(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _sushi: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    employeeAddressId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    employeeExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    employeeIdAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    employees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmployeeInfoAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
